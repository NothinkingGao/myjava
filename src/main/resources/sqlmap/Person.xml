<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="test">
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <!--namespace：用来区别不同的类的名字 -->
    <mapper namespace="test">

        <!-- 通过Id查询一个用户   -->
        <select id="findUserById" parameterType="Integer" resultType="com.ben.domain.User">
            select * from user where id = #{v}
        </select>

        <!-- 根据用户名模糊查询用户列表 -->
        <!--    select * from user where username like '%${value}%'-->
        <!-- select * from user where username like "%"#{value}"%"-->
        <select id="findUserByUsername" parameterType="String" resultType="com.ben.domain.User">
            select * from user where username like #{username}
        </select>

        <!--  添加用户  -->
        <insert id="insertUser" parameterType="com.ben.domain.User">
            <selectKey keyProperty="id" resultType="Integer" order="AFTER">
                select LAST_INSERT_ID()
            </selectKey>
            insert into user (username,birthday,address,sex) values(#{username},#{birthday},#{address},#{sex})
        </insert>
        <!-- 更新用户 -->
        <update id="updateUserById" parameterType="com.ben.domain.User">
            update user
            set username = #{username},sex = #{sex},birthday = #{birthday},address = #{address}
            where id = #{id}
        </update>
        <!-- 删除用户   -->
        <delete id="deleteUserById" parameterType="Integer">
            delete from user
            where id = #{vvvvv}
        </delete>
    </mapper>
</mapper>